function this = playrecIn_Plugin(strName)% Author: J. Kahnert (c) IHA @ Jade Hochschule applied licence see EOF% Based on a playrec example from Robert Humphrey% Version History:% Ver. 0.01 initial create 27-Mar-2014 			 JKglobal AlgoCom;this = struct;vars = struct;%% add plugin-properties heresetVar('loop', 1, 'bool');stDevices = playrec('getDevices');setVar('Device', 'a', {stDevices([stDevices.inputChans] > 0).name});setVar('bLowCPU', 1, 'bool');%% add local plugin-variables herepageNumList     = [];recSampleBuffer = [];pageBufCount    = [];bLowCPU         = [];%% public and nessesarry functions    function [BlockSettings] = init(BlockSettings)        if ~strcmp(BlockSettings.domain, 'time')            pic_message('Plugin expect time domain signal', 'error');        end                % Get the requested Device ID        szDevice        = getVar('Device');        bLowCPU         = getVar('bLowCPU');        iStructNum      = strcmpi({stDevices.name},szDevice);        iInputDevice    = stDevices(iStructNum).deviceID;        iInputDevice    = iInputDevice(1);                if BlockSettings.channels > stDevices(iStructNum).inputChans            pic_message(['Input device supports just '...                num2str(stDevices(iStructNum).inputChans) '!'], 'error');        end                % Reset Playrec if still running        if playrec('isInitialised'); playrec('reset'); end                % Initialise Playrec        playrec('init',             ...            BlockSettings.fs,       ... % Sampling Rate            -1,                     ... % Output Device     (disabled)            iInputDevice,           ... % Input Device            [],                     ... % Nchan of output   (disabled)            BlockSettings.channels, ... % Nchan of input            BlockSettings.blocklen);    % Blocksize                BlockSettingsIn = BlockSettings;    end    function preprocess()        pageBufCount    = 5;    % number of pages of buffering        bLowCPU         = false;% When true, the processor is used much        % more heavily (ie always at maximum), but        % the chance of glitches is reduced without        % increasing latency.                %Clear all previous pages        playrec('delPage');                recSampleBuffer = zeros(BlockSettingsIn.blocklen,...            BlockSettingsIn.channels);                % Create vector to act as FIFO for page numbers        pageNumList = repmat(-1, [1 pageBufCount]);    end    function [out] = process(in)        pageNumList = [pageNumList playrec('rec',...            BlockSettingsIn.blocklen,...            1:BlockSettingsIn.channels)];                if bLowCPU            while(playrec('isFinished', pageNumList(1)) == 0)            end        else            playrec('block', pageNumList(1));        end                lastRecording = playrec('getRec', pageNumList(1));        if ~isempty(lastRecording)            % basic processing - windowing would produce a better output            recSampleBuffer = [recSampleBuffer(length(lastRecording) ...                +1:end,:); lastRecording];        end                %pop page number from FIFO        pageNumList = pageNumList(2:end);                out = recSampleBuffer;    end    function postprocess()        % delete all pages now loop has finished        playrec('delPage');        % Reset Playrec if still running        if playrec('isInitialised'); playrec('reset'); end    endend