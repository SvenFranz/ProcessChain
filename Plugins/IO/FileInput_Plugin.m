function this = FileInput_Plugin(strName)global AlgoCom;this = struct;vars = struct;%% add plugin-properties heresetVar('filename', '', 'string');setVar('loop', 0, 'bool');%% add local plugin-variables herefiledata = [];idx = [];%% public and nessesarry functions    function [BlockSettings] = init(BlockSettings)        if ~strcmp(BlockSettings.domain, 'time')            pic_message('Plugin expect time domain signal', 'error');        end        BlockSettingsIn = BlockSettings;        idx = [];        filename = strrep(strrep(getVar('filename'), '\', filesep), '/', filesep);        if exist(filename, 'file')            [filedata BlockSettings.fs] = wavread(filename);            if BlockSettings.channels ~= size(filedata, 2)                BlockSettings.channels = size(filedata, 2);                pic_message(['BlockSettings.channels set to ' num2str(size(filedata, 2))]);            end            if BlockSettings.fs ~= BlockSettingsIn.fs                pic_message(['BlockSettings.fs set to ' num2str(BlockSettings.fs)]);            end            idx = 1 : BlockSettings.blocklen;        else            pic_message(['File not found: ''' filename ''''], 'Error');        end        BlockSettingsOut = BlockSettings;    end    function preprocess()    end    function [out] = process(in)        if getVar('loop') == true            idx = mod(idx, size(filedata, 1)) + 1;        end        idx(idx > size(filedata, 1)) = [];        if ~isempty(idx)            AlgoCom.debug.time = round([idx(1) idx(end)] ./ BlockSettingsIn.fs * 100) / 100;        end        out = filedata(idx, :);        AlgoCom.debug.Signal = out;        idx = idx + BlockSettingsIn.blocklen;        if size(out, 1) > 0 && size(out, 1) < BlockSettingsIn.blocklen            out = [out; zeros(BlockSettingsIn.blocklen - size(out, 1), size(out, 2))];        end    end    function postprocess()    end%--------------------Licence ---------------------------------------------% Copyright (c) <2014> S. Franz% Institut für Technische Assistenzsysteme% Institute for Hearing Technology and Audiology% Jade University of Applied Sciences% Permission is hereby granted, free of charge, to any person obtaining% a copy of this software and associated documentation files% (the "Software"), to deal in the Software without restriction, including% without limitation the rights to use, copy, modify, merge, publish,% distribute, sublicense, and/or sell copies of the Software, and to% permit persons to whom the Software is furnished to do so, subject% to the following conditions:% The above copyright notice and this permission notice shall be included% in all copies or substantial portions of the Software.% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,% EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES% OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.% IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY% CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,% TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THEend