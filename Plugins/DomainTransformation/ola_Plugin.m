function this = ola_Plugin(strName)% Author: S. Franz (c) ITAS/IHA @ Jade Hochschule applied licence see EOF% Version History:% Ver. 0.01 initial create 20-Mar-2014 			 SFglobal AlgoCom;this = struct;this.plugins = struct; % uncomment only when subplugins are neededvars = struct;%% add plugin-properties heresetVar('overlap', .5, 'numeric', 0, 1);setVar('blocklen', 1024, 'integer', 0, inf);%% add local plugin-variables hereidx = [];oldBuffer = [];window = [];LastBlockIn = [];LastBlockOut = [];zerospad = [];%% public and nessesarry functions    function [BlockSettings] = init(BlockSettings)        if ~strcmp(BlockSettings.domain, 'time')            pic_message('Plugin expect time domain signal', 'error');        end        idx = 1;        BlockSettingsIn = BlockSettings;        if BlockSettings.blocklen ~= getVar('blocklen')            BlockSettingsIn.blocklen = getVar('blocklen');            pic_message(['Blocklen set to ' num2str(BlockSettingsIn.blocklen)]);        end        if (BlockSettingsIn.blocklen < BlockSettingsIn.FFTlen)            pic_message('FFTlen < blocklen -> zeropadding!');        elseif (BlockSettingsIn.blocklen > BlockSettingsIn.FFTlen)            pic_message(['FFTlen > blocklen -> FFTlen set to ' num2str(BlockSettingsIn.blocklen)]);            BlockSettingsIn.FFTlen = BlockSettingsIn.blocklen;        end        LastBlockIn = zeros(floor(BlockSettingsIn.blocklen * getVar('overlap')), BlockSettingsIn.channels);        LastBlockOut = zeros(floor(BlockSettingsIn.blocklen * getVar('overlap')), BlockSettingsIn.channels);        window = repmat(sqrt(hann(BlockSettingsIn.blocklen, 'periodic')), 1, BlockSettingsIn.channels);        zerospad = zeros((BlockSettingsIn.FFTlen - getVar('blocklen')) / 2, BlockSettingsIn.channels);                [BlockSettingsIn] = process_subplugs(this.plugins, BlockSettingsIn);        BlockSettingsOut = BlockSettings;    end    function preprocess()        process_subplugs(this.plugins);    end    function [out] = process(in)        out = in * 0;        idx = 1;        if ~isempty(in)            in = [oldBuffer; in];            while idx + getVar('blocklen') * (1 - getVar('overlap')) <= size(in, 1) + 1                currBlock = in(idx + (1 : ceil(getVar('blocklen') * (1 - getVar('overlap')))) - 1, :);                currBlock = [LastBlockIn; currBlock];                LastBlockIn = currBlock(end - floor(getVar('blocklen') * getVar('overlap')) + 1 : end, :);                currBlock = [zerospad; currBlock .* window; zerospad];                [currBlock] = process_subplugs(this.plugins, currBlock);                currBlock = currBlock((size(zerospad, 1) + 1) : end - size(zerospad, 1),:);                currBlock = currBlock .* window;                currBlock(1 : size(LastBlockOut, 1), :) = currBlock(1 : size(LastBlockOut, 1), :) + LastBlockOut;                out(idx + (1 : ceil(getVar('blocklen') * (1 - getVar('overlap')))) - 1, :) = currBlock(1 : ceil(getVar('blocklen') * (1 - getVar('overlap'))), :);                LastBlockOut = currBlock(end - floor(getVar('blocklen') * getVar('overlap')) + 1: end, :);                idx = idx + ceil(getVar('blocklen') * (1 - getVar('overlap')));            end            oldBuffer = in(idx : end, :);        end        if idx == 1            out = [];        end    end    function postprocess()        process_subplugs(this.plugins);    end%--------------------Licence ---------------------------------------------% Copyright (c) <2014> S. Franz% Institut für Technische Assistenzsysteme% Institute for Hearing Technology and Audiology% Jade University of Applied Sciences% Permission is hereby granted, free of charge, to any person obtaining% a copy of this software and associated documentation files% (the "Software"), to deal in the Software without restriction, including% without limitation the rights to use, copy, modify, merge, publish,% distribute, sublicense, and/or sell copies of the Software, and to% permit persons to whom the Software is furnished to do so, subject% to the following conditions:% The above copyright notice and this permission notice shall be included% in all copies or substantial portions of the Software.% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,% EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES% OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.% IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY% CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,% TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THEend