function this = fft_Plugin(strName)% Author: S. Franz (c) ITAS/IHA @ Jade Hochschule applied licence see EOF% Version History:% Ver. 0.01 initial create 20-Mar-2014 			 SFglobal AlgoCom;this = struct;this.plugins = struct; % uncomment only when subplugins are neededvars = struct;%% add plugin-properties heresetVar('halfSpec', 1, 'bool');%% add local plugin-variables herehalfSpec = false;%% public and nessesarry functions    function [BlockSettings] = init(BlockSettings)        if ~strcmp(BlockSettings.domain, 'time')            pic_message('Plugin expect time domain signal', 'error');        end        if getVar('halfSpec')            pic_message('extracting half spectrum');        else            pic_message('extracting full spectrum');        end        halfSpec = getVar('halfSpec');        BlockSettingsIn = BlockSettings;        BlockSettings.domain = 'frequency';        [BlockSettings] = process_subplugs(this.plugins, BlockSettings);        BlockSettingsOut = BlockSettingsIn;    end    function preprocess()        process_subplugs(this.plugins);    end    function [out] = process(in)        if halfSpec ~= getVar('halfSpec');            if getVar('halfSpec')                pic_message('Extracted spectrum size changed: extracting half spectrum');            else                pic_message('Extracted spectrum size changed: extracting full spectrum');            end            halfSpec = getVar('halfSpec');        end        ifftSize = size(in, 1);        in = fft(in, BlockSettingsIn.FFTlen);        if getVar('halfSpec')            in = in(1:end/2+1, :);        end        [out] = process_subplugs(this.plugins, in);        if getVar('halfSpec')            AlgoCom.debug.HabsOut = 20*log10(abs(out) + eps);            out = real(ifft([out ; conj(out(end-1:-1:2,:))], ifftSize));            AlgoCom.debug.HabsIn = 20*log10(abs(in) + eps);        else            AlgoCom.debug.HabsOut = 20*log10(abs(out(1 : (end / 2 + 1), :)) + eps);            out = real(ifft(out, ifftSize));            AlgoCom.debug.HabsIn = 20*log10(abs(in(1 : (end / 2 + 1), :)) + eps);        end    end    function postprocess()        process_subplugs(this.plugins);    end%--------------------Licence ---------------------------------------------% Copyright (c) <2014> S. Franz% Institut für Technische Assistenzsysteme% Institute for Hearing Technology and Audiology% Jade University of Applied Sciences% Permission is hereby granted, free of charge, to any person obtaining% a copy of this software and associated documentation files% (the "Software"), to deal in the Software without restriction, including% without limitation the rights to use, copy, modify, merge, publish,% distribute, sublicense, and/or sell copies of the Software, and to% permit persons to whom the Software is furnished to do so, subject% to the following conditions:% The above copyright notice and this permission notice shall be included% in all copies or substantial portions of the Software.% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,% EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES% OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.% IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY% CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,% TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THEend